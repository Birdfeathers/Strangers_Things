{"ast":null,"code":"import { BaseUrl } from \"./constants\";\n\nfunction getUserName(token, setUsername) {\n  fetch(BaseUrl + '/test/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json()).then(result => {\n    setUsername(result.data.user.username);\n  }).catch(console.error);\n}\n\nfunction getPosts(setPosts, token, setPostsToDisplay) {\n  fetch(BaseUrl + '/posts', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json()).then(result => {\n    setPosts(result.data.posts);\n    setPostsToDisplay(result.data.posts);\n    console.log(result.data.posts);\n  }).catch(console.error);\n}\n\nfunction DeletePost(post_id, token, setPosts, setPostsToDisplay) {\n  fetch(BaseUrl + '/posts/' + post_id, {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n    getPosts(setPosts, token, setPostsToDisplay);\n  }).catch(console.error);\n}\n\n_c = DeletePost;\n\nfunction SendMessageAPI(post_id, token, message) {\n  console.log(BaseUrl + '/posts/' + post_id + '/messages');\n  fetch(BaseUrl + '/posts/' + post_id + '/messages', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      message: {\n        content: message\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n}\n\n_c2 = SendMessageAPI;\n\nfunction RegisterUser(username, password, setToken) {\n  fetch(BaseUrl + '/users/register', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n    setToken(result.data.token);\n    console.log(result.data.token);\n    localStorage.setItem(\"token\", result.data.token);\n  }).catch(console.error);\n}\n\n_c3 = RegisterUser;\n\nfunction LoginUser(username, password, setToken, setIncorrect) {\n  fetch(BaseUrl + '/users/login', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result.success);\n\n    if (result.success) {\n      console.log(result);\n      setToken(result.data.token);\n      localStorage.setItem(\"token\", result.data.token);\n      console.log(result.data.token);\n      setIncorrect(false);\n    } else {\n      setIncorrect(true);\n    }\n  }).catch(console.error);\n}\n\n_c4 = LoginUser;\n\nfunction getMyInfo(token, setMyInfo) {\n  fetch(BaseUrl + '/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n    setMyInfo(result);\n  }).catch(console.error);\n}\n\nfunction makePost(token, title, description, price, location, willDeliver) {\n  fetch(BaseUrl + '/posts', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      post: {\n        title,\n        description,\n        price,\n        location,\n        willDeliver\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n}\n\nexport { getUserName, getPosts, DeletePost, SendMessageAPI, RegisterUser, LoginUser, getMyInfo, makePost };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DeletePost\");\n$RefreshReg$(_c2, \"SendMessageAPI\");\n$RefreshReg$(_c3, \"RegisterUser\");\n$RefreshReg$(_c4, \"LoginUser\");","map":{"version":3,"sources":["/Users/rebeccacarr/Desktop/course_work/strangers_things/src/apiCalls.js"],"names":["BaseUrl","getUserName","token","setUsername","fetch","headers","then","response","json","result","data","user","username","catch","console","error","getPosts","setPosts","setPostsToDisplay","posts","log","DeletePost","post_id","method","SendMessageAPI","message","body","JSON","stringify","content","RegisterUser","password","setToken","localStorage","setItem","LoginUser","setIncorrect","success","getMyInfo","setMyInfo","makePost","title","description","price","location","willDeliver","post"],"mappings":"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","sourcesContent":["import { BaseUrl } from \"./constants\";\n\nfunction getUserName(token, setUsername)\n{\n    fetch(BaseUrl + '/test/me', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    },\n    }).then(response => response.json())\n    .then(result => {\n        setUsername(result.data.user.username);\n    })\n    .catch(console.error);\n}\n\nfunction getPosts(setPosts, token, setPostsToDisplay)\n{\n    fetch(BaseUrl + '/posts',  {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(response => response.json())\n        .then(result => {\n            setPosts(result.data.posts);\n            setPostsToDisplay(result.data.posts);\n            console.log(result.data.posts)\n        }).catch(console.error);\n        \n}\n\nfunction DeletePost(post_id, token, setPosts, setPostsToDisplay)\n{\n    fetch(BaseUrl + '/posts/' + post_id, {\n    method: \"DELETE\",\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    }\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result);\n        getPosts(setPosts, token, setPostsToDisplay);\n        \n    })\n    .catch(console.error);\n}\n\nfunction SendMessageAPI(post_id, token, message)\n{\n    console.log(BaseUrl +  '/posts/' + post_id + '/messages')\n    fetch(BaseUrl +  '/posts/' + post_id + '/messages',{\n    method: \"POST\",\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n        message: {\n        content: message\n        }\n    })\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result);\n    })\n    .catch(console.error);\n}\n\nfunction RegisterUser(username, password, setToken)\n{\n    fetch(BaseUrl + '/users/register', {\n    method: \"POST\",\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        user: {\n        username: username,\n        password: password\n        }\n    })\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result);\n        setToken(result.data.token);\n        console.log(result.data.token);\n        localStorage.setItem(\"token\", result.data.token);\n    })\n    .catch(console.error);\n}\n\nfunction LoginUser(username, password, setToken, setIncorrect)\n{\n    fetch(BaseUrl + '/users/login', {\n    method: \"POST\",\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        user: {\n        username: username,\n        password: password\n        }\n    })\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result.success);\n        if(result.success)\n        { console.log(result);\n            setToken(result.data.token);\n            localStorage.setItem(\"token\", result.data.token);\n            console.log(result.data.token);\n            setIncorrect(false);\n        }\n        else{\n            setIncorrect(true);\n        }\n    })\n    .catch(console.error);\n}\n\nfunction getMyInfo(token, setMyInfo)\n{    fetch(BaseUrl + '/users/me', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    },\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result);\n        setMyInfo(result);\n\n    })\n    .catch(console.error);\n}\n\nfunction makePost(token, title, description, price, location, willDeliver)\n{\n        fetch( BaseUrl + '/posts', {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n            post: {\n            title,\n            description,\n            price,\n            location,\n            willDeliver\n            }\n        })\n        }).then(response => response.json())\n        .then(result => {\n            console.log(result);\n        })\n        .catch(console.error);\n}\n\nexport {getUserName, getPosts, DeletePost, SendMessageAPI, RegisterUser, LoginUser, getMyInfo, makePost};"]},"metadata":{},"sourceType":"module"}